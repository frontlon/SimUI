
var CONF; //读取的config配置
var ROMJSON;//rom列表
var SCROLL_PAGE = 0; //当前滚动条翻页页数
var SCROLL_LOCK = false; //滚动条锁
var SCROLL_POS = 0; //默认滚动条位置
var MAXZOOM = 5; //最大缩放等级


view.root.on("ready", function(){

    /********** 数据初始化 **********/

    //改变默认窗口尺寸
    //view.state = View.WINDOW_FULL_SCREEN;
    //view.state = View.WINDOW_SHOWN;

    //初始化全局配置
    initConfig("0");

    //初始化rom
    var pf = CONF.Default.Platform;
    var menu =  $(#menulist).select("dd:current").attributes["opt"];
    ROMJSON = view.GetGameList(pf,menu,"","",SCROLL_PAGE)

    createRomList(0); //生成rom列表
    //生成rom数量
    var romCount = view.GetGameCount(pf,"","");
    $(#rom_count_num).html = romCount; //初始化在线人数

    //平台拖拽排序
    DragDrop{
        what      : "dl#menulist>dd:not(.fixed)",
        where     : "dl#menulist",
        container : "dl#menulist",        
        notBefore : "dl#menulist>dd.fixed",
        dropped : function(){
            if(ACTIVE_PLATFORM == 0){
                return;
            }
            var lis = $$(#menulist > dd);
            var name = "";
            var newObj = {};
            for(var li in lis) {
                name = li.attributes["opt"];
                newObj[name] = li.index;
            }
            var datastr = JSON.stringify(newObj);
            view.UpdateMenuSort(ACTIVE_PLATFORM.toString(),datastr);
        }
    }


    // ================= 事件 =================


        //视图窗口大小发生改变时
        //sizing
        view.on("size", function(sizingParams) {
            view.msgbox(#alert,"大小改变" + sizingParams.x.toString() +  sizingParams.y.toString() +  sizingParams.width.toString() +  sizingParams.height.toString());
            //view.dump("大小改变", sizingParams.x, sizingParams.y, sizingParams.width, sizingParams.height);
            //view.UpdateConfig("window_width",sizingParams.width);
            //view.UpdateConfig("window_height",sizingParams.height);
        });
        //视图窗口状态改变时
        view.on("statechange", function() {
            //view.dump(view.state);
            view.msgbox(#alert,"statechange 1:" + view.state.toString());
            view.msgbox(#alert,"statechange 2:" + View.WINDOW_FULL_SCREEN + "-" +view.state = View.WINDOW_SHOWN);

            /*
            if(view.state == "maximized" || view.state == "shown"){
                view.UpdateConfig("window_state",view.state);
            }
            */
        });


    //方向键选择rom
    self.on("keyup", function(evt) {

        if(evt.keyCode == Event.VK_TAB){
        //}else if(evt.keyCode == Event.VK_UP){
        //}else if(evt.keyCode == Event.VK_DOWN){                    
        }else if(evt.keyCode == Event.VK_LEFT){ //左键移动rom

            //如果没有rom，则直接返回
            if($$(#romlist li).length == 0){
                return;
            }
            //如果当前没有选定，则选定第一个
            var current = $(#romlist li:current);
            if (current == undefined){
                current = $(#romlist li);
                current.state.current = true; //第一个
                openSidebar(current);
                $(#test).html = "first";
            }else{
                //读取上一个节点
                var pri = $(#romlist li:current).priorNode;
                //如果没有上一个节点，直接返回
                if(pri == undefined){
                    return;
                }else{
                    pri.state.current = true;
                    openSidebar(pri);
                }
            }
        }else if(evt.keyCode == Event.VK_RIGHT){ //右键移动rom

            //如果没有rom，则直接返回
            if($$(#romlist li).length == 0){
                return;
            }

            //如果当前没有选定，则选定第一个
            var current = $(#romlist li:current);
            if (current == undefined){
                current = $(#romlist li);
                current.state.current = true; //第一个
                openSidebar(current);
            }else{
                //读取上一个节点
                var next = $(#romlist li:current).nextNode;
                //如果没有上一个节点，直接返回
                if(next == undefined){
                    return;
                }else{
                    next.state.current = true;
                    openSidebar(next);
                }
            }
        }else if(evt.keyCode == Event.VK_RETURN){ //回车键启动游戏
            var rom = $(#romlist).select("li:current");
            if (rom != undefined){
                view.RunGame(rom.attributes["rid"],"");
            }
        }else if(evt.keyCode == Event.VK_F5){ //f5刷新缓存
            createAllCache("1");
        }
        //else{
        //if((evt.keyCode>47 && evt.keyCode<58) || (evt.keyCode>64 && evt.keyCode<91)  || (evt.keyCode>95 && evt.keyCode<106)){}
        //}
    });
    
    //搜索功能 - 实时改变文本
    self.on("change", "#search_input", function(evt) {
        search();
    });

    //搜索功能 - 点击搜索按钮
    self.on("click", "#search_submit", function(evt) {
        search();
    });

    //目录单击
    self.on("click", "#menulist > dd", function(evt) {
        changeMenu(this);
    });
    
    //双击游戏模块，启动游戏
    self.on("dblclick", "#romlist li[class=romitem]", function(evt) {
        view.RunGame(this.attributes["rid"],"");
    });

    //点击模块，打开侧边栏
    self.on("click", "#romlist li[class=romitem]", function(evt) {
        openSidebar(this);
    });

    //游戏启动（侧边栏）
    self.on("click", "#right div[class=run]", function(evt) {
        var simdom = $(#sim_select).select("li:current");
        var sim = "";
        if(simdom != undefined){
            sim = simdom.attributes["sim"];
        }
        view.RunGame(this.attributes["rid"],sim);
    });    
           
    //设置喜爱
    self.on("click", "#right_favorite", function(evt) {
        setFavorite(this);
    });

    //更新一个rom的模拟器参数
    /*
    self.on("click", "#xxxxxxxx > dd", function(evt) {
        alert("go to set Cmd");

        var romId = obj.attributes["rid"];
        var simId = obj.attributes["sid"];
        var name = obj.attributes["name"];

        var cmd = view.GetRomSimCmd(id,simid);

        var result =  view.dialog({
            url:self.url(ROOTPATH + "dialog/edit_rom_cmd.html"),
            width:300,
            height:158,
            parameters: {
                name:name,
                simId:simId,
                romId:romId,
                cmd:cmd,

            }
        });

        if(result == undefined){
            return;
        }

        //更新一个rom的模拟器的参数配置
        var result = view.UpdateRomSimCmd(id,simid,cmd);
    });
*/
    //分页
    $(#center).onScroll = function(evt) {
        scrollLoadRom(evt);
    };

    //切换rom列表样式
    self.on("click", "#switch_romlist", function(evt) {
        switchRomListStyle(this);
    });
    
    //列表图标缩放
    self.on("click", "#zoom", function(evt) {
        romBlockZoom(this);
    });

    //生成缓存
    self.on("click", "#create", function(evt) {
        createAllCache("1");
    });

    //启动电子书
    self.on("click", "#book", function(evt) {
        view.RunBook();
    });

    //切换主题
    self.on("click", "#theme menu li", function(evt) {
        changeTheme(this);
    });

    //启动图片下载
    self.on("click", "#right_thumb_down", function(evt) {
        thumbDown(this.attributes["rid"],this.attributes["rname"]);
    });

    //按字母搜索rom
    self.on("click", "#num_search li", function(evt) {
        numSearch(this);
    });

    //弹出关于窗口
    self.on("click", "#about", function(evt) {
        view.dialog({
            url:self.url(ROOTPATH + "about.html"),
            width:480,
        })
    });

    //弹出设置窗口
    self.on("click", "#config", function(evt) {
        view.dialog({
            url:self.url(ROOTPATH + "config.html"),
            width:650,
            height:650,
            parameters: {
                getPlatform:getPlatform,
                getPlatformById:getPlatformById,
                getSimulatorByPlatform:getSimulatorByPlatform,
                updateConfig:updateConfig,
                updatePlatform:updatePlatform,
                updatePlatformSort:updatePlatformSort,
                addPlatform:addPlatform,
                delPlatform:delPlatform,
            };
        });
       
        $(#loading).style["display"]="block";
        initConfig("1");
        $(#loading).style["display"]="none";
    });

    //调整窗口大小
    view.on("size", function(evt) {
        //还原平台拉条位置
        platformResize(evt);
    });

    //攻略弹窗按钮
    $(#right_desc).on("click", function(evt) {

        //如果是禁用状态
        if(this.attributes.hasClass("right_desc_disable") == true){
            return;
        }

        //检查运行攻略文件
        var getjson = view.GetGameDetail(this.attributes["rid"]);
        var detailObj = JSON.parse(getjson);

        if(detailObj.StrategyFile != ""){
            view.RunStrategy(detailObj.StrategyFile);
            return;
        }

        //如果攻略文件不是可运行程序，则窗口运行        
        other = view.window{
          type:View.FRAME_WINDOW,
          url: self.url("desc.html"),
          alignment: 5,
          screen:1,
          width : 1280,
          height : 800,
          parameters: {
                content:detailObj.StrategyContent,
                title:detailObj.Info.Name,
                id:this.attributes["rid"],
                conf:CONF,
          };
        };
    });

    //设置菜单 帮助按钮
    $(#help).on("click", function(evt) {
        Sciter.launch("http://www.simui.net/");
    });

    //侧边栏切换模拟器
    self.on("click", "#sim_select > li", function(evt) {
        this.state.current = true;
        var romid = this.attributes["rom"];
        var simid = this.attributes["sim"];
        view.SetRomSimulator(romid,simid);
    });


    //设置rom的cmd
    self.on("click", "#sim_select > li button", function(evt) {
        var obj = this.parent;
        var romId = obj.attributes["rom"];
        var simId = obj.attributes["sim"];
        var name = obj.select("p").html;
        var cmdstr = view.GetRomCmd(romId,simId);
        var cmdObj = JSON.parse(cmdstr);
        var result =  view.dialog({
            url:self.url(ROOTPATH + "dialog/edit_rom_cmd.html"),
            width:350,
            height:206,
            parameters: {
                name:name,
                simId:simId,
                romId:romId,
                cmd:cmdObj.Cmd,
                unzip:cmdObj.Unzip,
            }
        });

        if(result == undefined){
            return;
        }

        if (cmdObj.Id == 0){
            //添加一个rom的模拟器的参数配置
            view.AddRomCmd(romId,simId,result);
        }else{
            //更新一个rom的模拟器的参数配置
            view.UpdateRomCmd(cmdObj.Id,simId,result);
        }

    });


});

//侧边栏缩略图滑动特效
$(#rotate) << event click() {     
    var container = $(div#stack);
    var next = container.shown.next || container.first;
    this.state.disabled = true;
    rotateTo(next, :: (this super).state.disabled = false);
}

//初始化配置
function initConfig(isfresh){

    var confstr = view.InitData("config",isfresh);
    CONF = JSON.parse(confstr);

    //如果初始路径不同，则刷新数据
    if(CONF.RootPath != CONF.Default.RootPath){
        //删除所有缓存后，重建数据库rom
        view.TruncateRomCache();
        view.CreateRomCache();
        view.UpdateConfig("root_path",CONF.RootPath);
        view.msgbox(#alert,CONF.Lang.FirstBootCreateCache);
    }

    //创建语言
    if (isfresh == "0"){
        createLang();
    }

    createTheme(); //创建主题
    createPlatform(); //生成平台列表
    initRomListStyle(); //初始化游戏列表样式
   
    //生成菜单
    var menujson = view.GetMenuList(CONF.Default.Platform);
    createMenuList(menujson);

    //激活第一个字母索引
    $(#num_search li).state.current = true;

    //动态设置平台栏宽度，滑动平台栏使用
    setPlatformWidth();
  }
