//初始化
function Init(){
    
    //初始化全局配置
    initConfig("0");

    //改变默认窗口尺寸
    view.state = CONF.Default.WindowState.toInteger();

    //初始化rom
    var pf = CONF.Default.Platform;
    var menu =  $(#menulist).select("dd:current").attributes["opt"];
    ROMJSON = view.GetGameList(pf,menu,"","",SCROLL_PAGE)

    createRomList(0); //生成rom列表
    //生成rom数量
    var romCount = view.GetGameCount(pf,"","");
    $(#rom_count_num).html = romCount; //初始化在线人数
}
//视图窗口状态改变时
function windowStateChange(evt){
     if(view.state == 1 || view.state == 3){
            view.UpdateConfig("window_state",view.state);
        }
}
//调整窗口大小
function windowSizing(evt){
     //更新默认配置
        view.UpdateConfig("window_width",evt.width);
        view.UpdateConfig("window_height",evt.height);
}
//游戏启动（侧边栏）
function sidebarRunGame(evt){
     var simdom = $(#sim_select).select("li:current");
    var sim = "";
    if(simdom != undefined){
        sim = simdom.attributes["sim"];
    }
    view.RunGame(evt.attributes["rid"],sim);
}
//文字大小
function changeFontSize(evt){
    var  val = evt.attributes['value'].toInteger();
    var dom = $(#romlist);
    val ++;
    if (val >= 11){
        if ($(#switch_romlist).attributes["value"] == 1){
            val = 0;
        }else{
            val = 1;
        }
    }
    for (var i = 0; i <= 10; i++){
        dom.attributes.removeClass('fontsize'+i);
    }

    dom.attributes.addClass('fontsize'+val);
    evt.attributes['value'] = val;
    view.UpdateConfig("font_size",val)
}
//生成缓存
function createCache(evt){
    $(#create).state.disabled = true;
    $(#create).attributes.addClass("disabled");
    startLoading();
    var opt = evt.attributes["opt"];
    var platform = 0;

    if (opt == "platform"){
        platform = ACTIVE_PLATFORM;
    }
    view.CreateRomCache(platform);
}
//检查更新
function checkUpgrade(evt){
    var data = view.CheckUpgrade();
    if(data != ""){
        upgrade(data)
    }else{
        view.msgbox(#info,CONF.Lang.Latestversion);
    }
}

//弹出关于窗口
function openAbout(){
    view.dialog({
        url:self.url(ROOTPATH + "about.html"),
        width:480,
    })
}
//弹出设置窗口
function openConfig(evt){
    view.dialog({
        url:self.url(ROOTPATH + "config.html"),
        width:655,
        height:760,
        parameters: {

        };
    });
    startLoading();
    initConfig("1");
    endLoading();
}
//攻略弹窗按钮
function openDesc(evt){
    //如果是禁用状态
    if(evt.attributes.hasClass("right_desc_disable") == true){
        return;
    }

    //检查运行攻略文件
    var getjson = view.GetGameDetail(evt.attributes["rid"]);
    var detailObj = JSON.parse(getjson);

    if(detailObj.StrategyFile != ""){
        view.RunStrategy(detailObj.StrategyFile);
        return;
    }

    //如果攻略文件不是可运行程序，则窗口运行        
    other = view.window{
        type:View.FRAME_WINDOW,
        url: self.url("desc.html"),
        alignment: 5,
        screen:1,
        width : 1280,
        height : 800,
        parameters: {
            content:detailObj.StrategyContent,
            title:detailObj.Info.Name,
            id:evt.attributes["rid"],
            conf:CONF,
        };
    };
}
//侧边栏切换模拟器
function switchRomSim(evt){
     evt.state.current = true;
    var romid = evt.attributes["rom"];
    var simid = evt.attributes["sim"];
    view.SetRomSimulator(romid,simid);
}

//设置rom的cmd
function SetRomCmd(evt){
   var obj = evt.parent;
        var romId = obj.attributes["rom"];
        var simId = obj.attributes["sim"];
        var name = obj.select("p").html;
        var cmdstr = view.GetRomCmd(romId,simId);
        var cmdObj = JSON.parse(cmdstr);
        var simJson =  view.dialog({
            url:self.url(ROOTPATH + "dialog/edit_rom_cmd.html"),
            width:360,
            height:215,
            parameters: {
                name:name,
                simId:simId,
                romId:romId,
                cmd:cmdObj.Cmd,
                unzip:cmdObj.Unzip,
            }
        });

        if(simJson == undefined){
            return;
        }
        view.UpdateRomCmd(romId,simId,simJson);
}

//侧边栏缩略图滑动特效
function thumbSlider(evt){
    var container = $(div#stack);
    var next = container.shown.next || container.first;
    evt.state.disabled = true;
    rotateTo(next, :: (this super).state.disabled = false);
}

//启动帮助
function runHelp(){
    Sciter.launch("http://www.simui.net/");
}


//开启关闭平台栏
function togglePlatform(){
    var dom = $(#left_platform);
    if (dom.style["display"] == "block"){
        dom.style["display"] = "none";
    }else{
        dom.style["display"] = "block";
    }
}
//开启关闭菜单栏
function toggleMenu(){
    var dom = $(#left_menu);
    if (dom.style["display"] == "block"){
        dom.style["display"] = "none";
    }else{
        dom.style["display"] = "block";
    }
}
//开启关闭侧边栏
function toggleSidebar(){
    var dom = $(#right);
    if (dom.style["display"] == "block"){
        dom.style["display"] = "none";
    }else{
        dom.style["display"] = "block";
    }
}

//发现更新
function upgrade(data){
    if (data == ""){
        return;
    }else if (data == "error"){
        view.msgbox(#warning,CONF.Lang.NetworkRequestFailed);
        return;
    }
 
    var dataObj = JSON.parse(data);

    //选择窗口
    var result = view.msgbox {
        type:#information, 
        caption:CONF.Lang.CheckUpgrade,
        content:CONF.Lang.FoundNewversion + ": " + dataObj.version, 
        buttons:[
            {id:#download,text:CONF.Lang.DownloadNewVersion},
            {id:#never,text:CONF.Lang.NotTip},
            {id:#cancel,text:CONF.Lang.Cancel,role:"default-button"}
        ]
    };

    switch(result){
        case "download":
            Sciter.launch("http://www.simui.net/");
            break;
        case "never":
            //更新平台信息
            view.UpdateConfig("upgrade_id",dataObj.id.toString());
            break;
    }
}

