//更新配置信息
function updateConfig(data){
    for(var k in data) {
        var result = view.UpdateConfig(k,data[k]);
    }
    view.msgbox(#alert,CONF.Lang.UpdateSuccess);
}

//添加一个新平台
function addPlatform(name){
    var result = view.AddPlatform(name);
    return result;
}

//删除一个平台
function delPlatform(id){
    //删除平台
    var result = view.DelPlatform(id);
    //生成缓存
    createAllCache();
    return result;
}

//更新平台配置
function updatePlatform(data){    
    var datastr = JSON.stringify(data);
    var result = view.UpdatePlatform(datastr);
    if( result.toString() == "1"){
        view.msgbox(#alert,CONF.Lang.UpdateSuccess);
    }
}



//读取一个平台的信息
function getPlatformById(id){
    var result = view.GetPlatformById(id);
    var resultObj = JSON.parse(result);
    return resultObj;
}

//读取平台列表
function getPlatform(){
    var result = view.GetPlatform();
    var resultObj = JSON.parse(result);
    return resultObj;
}

//读取一个模拟器信息
function getSimulatorById(id){
    var result = view.GetSimulatorById(id);
    var resultObj = JSON.parse(result);
    return resultObj;
}

//读取模拟器列表
function getSimulatorByPlatform(platform){
    var result = view.GetSimulatorByPlatform(platform);
    var resultObj = JSON.parse(result);
    return resultObj;
}

//添加模拟器
function addSimulator(data){
    var datastr = JSON.stringify(data);
    var result = view.AddSimulator(datastr);
    return result;
}

//编辑模拟器
function updateSimulator(data){
    var datastr = JSON.stringify(data);
    var result = view.UpdateSimulator(datastr);
    return result;
}

//删除模拟器
function delSimulator(id){
    var result = view.DelSimulator(id);
    return result;
}

//更新rom的展示图片
function updateRomThumbs(type,id,newpath){
    var result = view.UpdateRomThumbs(type,id,newpath);

    //如果是展示图，则刷新rom列表图片
    if(result != ""){
        if(type == "1"){
            $(#romlist).select("li[rid="+id+"] img").attributes['src'] = newpath;
        }
    }
    return result;
}

//读取rom的详细信息
function getRomDetail(id){
    var result = view.GetGameDetail(id);
    var obj = JSON.parse(result);
    return obj;
}

//读取快捷工具
function getShortcut(){
    var result = view.GetShortcut();
    var obj = JSON.parse(result);
    return obj;
}
//添加快捷工具
function addShortcut(){
    var result = view.AddShortcut();
    return result;
}

//编辑快捷工具
function updateShortcut(data){
    var datastr = JSON.stringify(data);
    var result = view.UpdateShortcut(datastr);
    return result;
}

//删除快捷工具
function delShortcut(id){
    var result = view.DelShortcut(id);
    return result;
}

//排序快捷工具
function updateShortcutSort(data){
    var datastr = JSON.stringify(data);
    view.UpdateShortcutSort(datastr);
}
